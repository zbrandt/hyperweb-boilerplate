{
  "version": 3,
  "sources": ["../../src/escrow-contract/sdk.ts", "../../src/escrow-contract/escrow.ts", "../../src/escrow-contract/index.ts"],
  "sourcesContent": ["import { MappingStore, State, Store } from \"./types\";\n\nexport function useStore<ValueType>(key: string, defaultValue: ValueType): Store<ValueType> {\n  return (state: State) => [\n    () => state.get(key) ?? defaultValue,\n    (value: ValueType) => state.set(key, value)\n  ]\n}\n\nexport function useMapping<Params extends any[], ValueType>(keys: string[], defaultValue: ValueType): MappingStore<Params, ValueType> {\n  return (state: State) => [\n    (...args: Params) => {\n      // assert: keys.length === args.length + 1\n      const interleavedKey = [keys[0]];\n      const pathKeys = keys.slice(1);\n      for(let i = 0; i < pathKeys.length; i++) {\n        interleavedKey.push(pathKeys[i], args[i]);\n      }\n      return state.get(interleavedKey.join('/')) ?? defaultValue;\n    },\n    (...args: [...Params, ValueType]) => {\n      const interleavedKey = [keys[0]];\n      const pathKeys = keys.slice(1);\n      const keyArgs = args.slice(0, -1) as Params;\n      for(let i = 0; i < pathKeys.length; i++) {\n        interleavedKey.push(pathKeys[i], keyArgs[i]);\n      }\n      state.set(interleavedKey.join('/'), args[args.length - 1]);\n    }\n  ]\n}\n", "// @ts-ignore, `~bank` is an internal package\nimport { getBalance, sendCoins } from '~bank';\n\nimport { useMapping, useStore } from './sdk';\nimport { MappingStore, Msg, State, Store } from './types'\n\nconst amount: Store<number> = useStore('amount', 0);\nconst buyer: Store<string> = useStore('buyer', '');\nconst seller: Store<string> = useStore('seller', '');\nconst agent: Store<string> = useStore('agent', '');\n\nexport class Contract {\n    msg: Msg;\n    address: string;\n    amount;\n    setAmount;\n    buyer;\n    setBuyer;\n    seller;\n    setSeller;\n    agent;\n    setAgent;\n\n    constructor(state: State, {msg, address}: {msg: Msg, address: string}) {\n        this.msg = msg;\n        this.address = address;\n\n        [this.amount, this.setAmount] = amount(state);\n        [this.buyer, this.setBuyer] = buyer(state);\n        [this.seller, this.setSeller] = seller(state);\n        [this.agent, this.setAgent] = agent(state);\n    }\n\n    // token: string = \"uusdc\"; // ibc denom for usdc\n\n    deposit(amount: number) {\n        if (this.amount() !== 0) {\n        throw Error(\"escrow already has funds\");\n        }\n        if (amount <= 0) {\n        throw Error(\"invalid amount\");\n        }\n        this.setAmount(amount);\n        // this.setBuyer(buyer);\n    }\n\n    release(seller: string) {\n        if (this.amount() === 0) {\n            throw Error(\"escrow has no funds\");\n        }\n        const buyer = this.buyer();\n        const agent = this.agent();\n        if (buyer === '' || seller === '' || agent === '') {\n        throw Error(\"missing buyer, seller, or agent\");\n        }\n        sendCoins(agent, seller, this.amount());\n        this.setAmount(0);\n        this.setBuyer('');\n        this.setSeller('');\n        this.setAgent('');\n    }\n\n    cancel() {\n        if (this.amount() === 0) {\n            throw Error(\"escrow has no funds\");\n        }\n        const buyer = this.buyer();\n        const agent = this.agent();\n        if (buyer === '' || agent === '') {\n            throw Error(\"missing buyer or agent\");\n        }\n        sendCoins(agent, buyer, this.amount());\n        this.setAmount(0);\n        this.setBuyer('');\n        this.setSeller('');\n        this.setAgent('');\n    }\n\n    getAmount(): number {\n        return this.amount();\n    }\n\n}\n", "export * from './escrow'\nexport * from './sdk'\nexport * from './types'\n\nimport { Contract } from './escrow'\n\nexport default Contract;  // need to explicitly export Contract to make it the entry point\n"],
  "mappings": "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",
  "names": ["amount", "seller", "buyer", "agent"]
}
